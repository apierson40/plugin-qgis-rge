# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ExtractRGEDialog
                                 A QGIS plugin
 Extraction RGE
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-10-18
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Alexandre Pierson / A.GE.D.I.
        email                : alexandre.pierson@agedi.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import glob
import os
import shutil

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.core import QgsVectorLayer, QgsFeatureRequest, QgsVectorFileWriter

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'extract_rge_dialog_base.ui'))


class ExtractRGEDialog(QtWidgets.QDialog, FORM_CLASS):
    global pathAdminExpress, pathAdminExpressCommune, listCode, folderBDP, pathTiff, folderBDO, pathECW, folderOutput, lastRep, yearBDO, yearBDP

    pathAdminExpress = os.path.dirname(__file__) + "/admin_express_commune/"
    pathAdminExpressCommune = pathAdminExpress + "COMMUNE.shp"
    listCode = []
    folderBDP = ""
    pathTiff = []
    folderBDO = ""
    pathECW = []
    folderOutput = ""
    lastRep = os.path.dirname(__file__)
    indexFolderBDP = ""
    indexFolderBDO = ""
    yearBDO = ""
    yearBDP = ""

    def __init__(self, parent=None):
        """Constructor."""
        super(ExtractRGEDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # Paramétrage plugin at start
        self.tabWidget.setCurrentIndex(0)
        self.textEdit_folderBDP.setDisabled(True)
        self.toolButton_searchFolderBDP.setDisabled(True)
        self.textEdit_folderBDO.setDisabled(True)
        self.toolButton_searchFolderBDO.setDisabled(True)
        self.progressBar.setProperty("value", 0)

        # Connexion avec les actions
        self.toolButton_searchOneCom.clicked.connect(self.search_one_commune)
        self.toolButton_validateOneCom.clicked.connect(self.validate_one_commune)
        self.toolButton_searchMultiCom.clicked.connect(self.search_multiple_communes)
        self.toolButton_validateMultiCom.clicked.connect(self.validate_multiple_communes)

        self.label_folderBDP.clicked.connect(self.choose_bd)
        self.label_folderBDO.clicked.connect(self.choose_bd)

        self.toolButton_searchFolderBDP.clicked.connect(self.search_folder_BDP)
        self.toolButton_searchFolderBDO.clicked.connect(self.search_folder_BDO)
        self.toolButton_searchFolderOutput.clicked.connect(self.search_folder_output)

        self.pushButton_exe.clicked.connect(self.execute)
        self.pushButton_quit.clicked.connect(self.init_parameters)
        self.pushButton_updateAdminExpress.clicked.connect(self.update_commune_data)

    """
    /***************************************************************************************/
    """

    def search_one_commune(self):
        insee = self.textEdit_inseeCom.toPlainText()
        self.textEdit_inseeCom.setText(insee)
        if len(insee) != 5:
            self.create_warning_alert("Le code INSEE de la commune doit comporter 5 chiffres !")
        else:
            if os.path.exists(pathAdminExpressCommune):
                name = self.get_commune_name([self.textEdit_inseeCom.toPlainText()])
                if name:
                    self.textEdit_nameCom.setText(self.get_commune_name([self.textEdit_inseeCom.toPlainText()])[0][1])
                else:
                    self.create_warning_alert("Le code INSEE renseigné n'existe pas !")

    def validate_one_commune(self):
        global listCode

        if self.textEdit_nameCom.toPlainText() != "":
            self.tabMultiCom.setEnabled(False)
            self.textEdit_inseeCom.setEnabled(False)
            self.toolButton_searchOneCom.setEnabled(False)
            listCode.append(self.textEdit_inseeCom.toPlainText())
        else:
            self.create_warning_alert("Veuillez renseigner un code INSEE !")

    """
    /*************************************************************************************/
    """

    def search_multiple_communes(self):
        self.textEdit_fileMultiCom.setText("")
        self.inputFile, _ = QtWidgets.QFileDialog \
            .getOpenFileName(self, "Choisir un fichier", lastRep, "Texte (*.txt)")
        if self.inputFile:
            if os.path.isfile(self.inputFile):
                self.textEdit_fileMultiCom.setText(self.inputFile)
                self.verify_file(self.inputFile)

    def verify_file(self, file):
        global listCode
        listCode = []
        listInsee = []
        txtFile = open(file, "r")

        nbCom = 0
        for el in txtFile:
            nbCom = nbCom + 1
            if (el[:5].isdigit()) or (el[:2] == "2B") or (el[:2] == "2A"):
                listInsee.append(el[:5])
        txtFile.close()

        for el in self.get_commune_name(listInsee):
            listCode.append(el[0])

        self.create_info_alert("Nombre de commune(s) détectée(s) : " + str(len(listCode)) + "\n"
                               + "Nombre de communes non prises en comptes : " + str(nbCom - len(listCode)))

    def validate_multiple_communes(self):
        global listCode

        if listCode:
            self.tabOneCom.setEnabled(False)
            self.toolButton_searchMultiCom.setEnabled(False)
            self.textEdit_fileMultiCom.setEnabled(False)
        else:
            self.create_warning_alert("Veuillez renseigner une liste de code INSEE valide !")

    """
    /*************************************************************************************/
    """

    def get_commune_name(self, code):
        layer = QgsVectorLayer(pathAdminExpressCommune, "admin_express_commune", "ogr")
        values = []

        for obj in layer.getFeatures():
            inseeIndex = layer.dataProvider().fieldNameIndex("INSEE_COM")
            inseeValue = obj.attributes()[inseeIndex]

            if inseeValue in code:
                nameIndex = layer.dataProvider().fieldNameIndex("NOM_COM")
                nameValue = obj.attributes()[nameIndex]
                values.append([inseeValue, nameValue])
        return values

    """
    /*************************************************************************************/
    """

    def choose_bd(self):
        if self.label_folderBDP.isChecked():
            self.textEdit_folderBDP.setDisabled(False)
            self.toolButton_searchFolderBDP.setDisabled(False)
        else:
            self.textEdit_folderBDP.setDisabled(True)
            self.toolButton_searchFolderBDP.setDisabled(True)

        if self.label_folderBDO.isChecked():
            self.textEdit_folderBDO.setDisabled(False)
            self.toolButton_searchFolderBDO.setDisabled(False)
        else:
            self.textEdit_folderBDO.setDisabled(True)
            self.toolButton_searchFolderBDO.setDisabled(True)

    def search_folder_BDP(self):
        global lastRep, folderBDP

        self.textEdit_folderBDP.setText("")
        self.inputFile = QtWidgets.QFileDialog \
            .getExistingDirectory(self, "Choisir un fichier", lastRep)
        self.textEdit_folderBDP.setText(self.inputFile)
        lastRep = self.inputFile
        if self.inputFile != "":
            folderBDP = self.inputFile

    def search_folder_BDO(self):
        global lastRep, folderBDO

        self.textEdit_folderBDO.setText("")
        self.inputFile = QtWidgets.QFileDialog \
            .getExistingDirectory(self, "Choisir un fichier", lastRep)
        self.textEdit_folderBDO.setText(self.inputFile)
        lastRep = self.inputFile
        if self.inputFile != "":
            folderBDO = self.inputFile

    def search_folder_output(self):
        global lastRep, folderOutput

        self.textEdit_folderOutput.setText("")
        self.inputFile = QtWidgets.QFileDialog \
            .getExistingDirectory(self, "Choisir un fichier", lastRep)
        self.textEdit_folderOutput.setText(self.inputFile)
        lastRep = self.inputFile
        if self.inputFile != "":
            folderOutput = self.inputFile

    """
    /*************************************************************************************/
    """

    def execute(self):
        global listCode

        self.textEdit_console.setText("")
        self.write_action_to_console("Traitement en cours...")
        self.progressBar.setValue(0)

        init = False
        self.write_action_to_console("---------------------------------------------------------------------")
        self.write_action_to_console("Initialisation...")

        com = False
        if listCode:
            self.set_progress_bar(5)
            com = True
        else:
            self.create_warning_alert("La liste des communes à traiter est vide !")
            self.write_stop_action_to_console()

        verifyFolder = False
        if com:
            if self.verify_folder_data():
                self.set_progress_bar(10)
                verifyFolder = True
            else:
                self.write_stop_action_to_console()

        verifyBD = False
        if verifyFolder:
            if self.verify_database():
                self.set_progress_bar(15)
                verifyBD = True
            else:
                self.write_stop_action_to_console()

        if verifyBD:
            self.write_ok_action_to_console()
            init = True
        else:
            self.write_stop_action_to_console()

        createdFile = False
        if init:
            self.write_action_to_console("---------------------------------------------------------------------")
            self.write_action_to_console("Création des dossiers...")
            self.write_action_to_console("Cette opération peut prendre plusieurs secondes...")
            if self.create_file_output(listCode):
                self.write_notice_in_folder(listCode)
                self.set_progress_bar(30)
                self.write_ok_action_to_console()
                createdFile = True
            else:
                self.write_stop_action_to_console()

        if createdFile:
            parcellaire = False

            self.write_notice_in_folder(listCode)

            if self.label_folderBDP.isChecked():
                localisant = False
                self.write_action_to_console("---------------------------------------------------------------------")
                self.write_action_to_console("Découpe des localisants...")

                if self.extract_localisant(listCode):
                    self.set_progress_bar(50)
                    self.write_ok_action_to_console()
                    localisant = True
                else:
                    self.write_stop_action_to_console()

                if localisant or not localisant:
                    self.write_action_to_console(
                        "---------------------------------------------------------------------")
                    self.write_action_to_console("Découpe de la BD Parcellaire Raster...")

                    if self.extract_BDP(listCode):
                        self.set_progress_bar(70)
                        self.write_ok_action_to_console()
                        parcellaire = True

                        if not self.label_folderBDO.isChecked():
                            self.set_progress_bar(100)
                            self.write_action_to_console(
                                "---------------------------------------------------------------------")
                            self.write_action_to_console("Fin")
                    else:
                        self.set_progress_bar(100)
                        self.write_stop_action_to_console()

            if self.label_folderBDO.isChecked():
                if not self.label_folderBDP.isChecked():
                    parcellaire = True

                if parcellaire or not parcellaire:
                    self.write_action_to_console(
                        "---------------------------------------------------------------------")
                    self.write_action_to_console("Découpe de la BD Ortho...")

                    if self.extract_BDO(listCode):
                        self.set_progress_bar(100)
                        self.write_ok_action_to_console()
                        self.write_action_to_console(
                            "---------------------------------------------------------------------")
                        self.write_action_to_console("Fin")
                    else:
                        self.set_progress_bar(100)
                        self.write_stop_action_to_console()

    """
    /*************************************************************************************/
    """

    def verify_folder_data(self):
        global folderBDP, folderBDO, folderOutput
        txt = ""

        if self.label_folderBDP.isChecked():
            if not os.path.isdir(folderBDP):
                txt += "Dossier BDP " + folderBDP + "inexistant !\n"
        if self.label_folderBDO.isChecked():
            if not os.path.isdir(folderBDO):
                txt += "Dossier BDO " + folderBDO + "inexistant !\n"
        if not os.path.isdir(folderOutput):
            txt += "Dossier sortie " + folderOutput + "inexistant !\n"
        if txt != "":
            self.create_warning_alert(txt)
            return False
        else:
            return True

    def verify_database(self):
        global yearBDO, yearBDP, folderBDO, folderBDP
        yearBDO = ""
        yearBDP = ""
        ok = 0

        if self.label_folderBDP.isChecked():
            yearBDP = folderBDP[-4:]
            if yearBDP == "":
                ok = ok + 1
        if self.label_folderBDO.isChecked():
            yearBDO = folderBDO[-4:]
            if yearBDO == "":
                ok = ok + 1
        if ok == 0:
            return True
        else:
            self.create_warning_alert("Pas de dates trouvées pour les données !")
            return False

    """
    /**************************************************************************************/
    """

    def create_file_output(self, code):
        global yearBDO, yearBDP, folderOutput

        if code:
            listInseeCom = self.get_commune_name(code)
            if listInseeCom:
                listFiles = []

                for el in listInseeCom:
                    directory = el[0] + "_" + el[1]
                    listFiles.append(folderOutput + "/" + el[0][:2])
                    listFiles.append(folderOutput + "/" + el[0][:2] + "/" + directory)

                    if self.label_folderBDP.isChecked():
                        listFiles.append(folderOutput + "/" + el[0][:2] + "/" + directory + "/"
                                         + directory + "_BDParcellaire_" + yearBDP)
                        listFiles.append(folderOutput + "/" + el[0][:2] + "/" + directory + "/"
                                         + directory + "_BDParcellaire_" + yearBDP + "/"
                                         + directory + "_BDP_TIFF_" + yearBDP)
                    if self.label_folderBDO.isChecked():
                        listFiles.append(folderOutput + "/" + el[0][:2] + "/" + directory + "/"
                                         + directory + "_BDORTHO_" + yearBDO)

                if listFiles:
                    ok = 0

                    for el in listFiles:
                        ok = ok + self.create_folder(el)

                    if ok == 0:
                        return True
                    else:
                        self.create_warning_alert(str(ok) + " dossier(s) n'ont pas pu être créé(s) !")
                        return False
                else:
                    self.create_warning_alert("Problèmes de nom de dossiers !")
                    return False
            else:
                self.create_warning_alert("Liste de codes insee non valides !")
                return False
        else:
            self.create_warning_alert("Pas de communes de validées !")
            return False

    """
    /************************************************************************************/
    """

    def write_notice_in_folder(self, codes):
        global folderOutput
        noticeFile = os.path.dirname(__file__) + "/documentation/notice.pdf"

        for code in codes:
            insee = self.get_commune_name(code)

            if insee:
                for el in insee:
                    noticeNewFile = folderOutput + "/" + el[0][:2] + "/" + el[0] + "_" + el[1] + "/notice.pdf"
                    shutil.copy(noticeFile, noticeNewFile)

    """
    /*************************************************************************************/
    """

    def extract_localisant(self, codes):
        global folderBDP, folderOutput, yearBDP
        path = ""
        ok = 0
        comNoCopy = []
        codeDep = []

        for el in codes:
            if el not in codeDep:
                codeDep.append(el)

        for root, directory, files in os.walk(folderBDP):
            for file in files:
                if file == "LOCALISANT.SHP":
                    path = os.path.join(root, file)

        if (os.path.isfile(path)) and (os.path.isdir(folderOutput)):
            if len(codeDep) >= 1:
                el = codeDep[0]
                localisant = QgsVectorLayer(path, el[:2] + "_admin_express_localisant", "ogr")
                layer = QgsVectorLayer(self.get_departement_layer(el[:2]), el + "_admin_express_commune", "ogr")

                for obj in layer.getFeatures():
                    code = obj.attributes()[layer.dataProvider().fieldNameIndex("INSEE_COM")]
                    name = obj.attributes()[layer.dataProvider().fieldNameIndex("NOM_COM")]

                    if code in codes:
                        mifOutput = folderOutput + "/" + code[:2] + "/" + code + "_" + name + "/" \
                                    + code + "_" + name + "_BDParcellaire_" \
                                    + yearBDP + "/" + code + "_" + name + "_localisant_" + yearBDP + ".mif"

                        if not os.path.isfile(mifOutput):
                            ids = []
                            geom = obj.geometry()
                            points = localisant.getFeatures(QgsFeatureRequest().setFilterRect(geom.boundingBox()))

                            for point in points:
                                if point.geometry().within(geom):
                                    ids.append(point)

                            localisant.selectByIds([p.id() for p in ids])
                            QgsVectorFileWriter.writeAsVectorFormat(localisant,
                                                                    mifOutput,
                                                                    "CP1250",
                                                                    localisant.crs(),
                                                                    "MapInfo MIF",
                                                                    onlySelected=True)

                            if os.path.isfile(mifOutput):
                                ok = ok + 1
                                comNoCopy.append(code)
                        else:
                            ok = ok + 1

                self.write_action_to_console(str(ok) + " sur " + str(len(codes)) + " découpés !")
                if ok != 0:
                    if ok == len(codes):
                        return True
                    else:
                        txt = ""

                        for i in range(0, len(comNoCopy)):
                            commune = comNoCopy[i]

                            if i < len(comNoCopy) - 1:
                                txt = txt + commune + ", "
                            else:
                                txt = txt + commune

                        self.write_action_to_console("Les localisants des communes (" + txt
                                                     + ") n'ont pas été découpés !")
                        return False
                else:
                    self.write_action_to_console("Aucun localisant découpé !")
                    return False
        else:
            self.write_action_to_console("Pas de fichiers localisants ou pas de dossier de sortie !")
            return False

    """
    /**************************************************************************************/
    """

    def extract_BDP(self, codes):
        global folderOutput, folderBDP, yearBDP, indexFolderBDP
        codeDep = []

        for code in codes:
            if code[:2] not in codeDep:
                codeDep.append(code[:2])

        indexFile = ""

        if len(codeDep) >= 1:
            createIndex = False
            el = codeDep[0]
            indexFolderBDP = folderBDP + "/" + el + "_TIFF_" + yearBDP + "/index"

            if self.create_folder(indexFolderBDP) == 0:
                indexFile = indexFolderBDP + "/" + el + "_bdp_index_" + yearBDP + ".shp"

                if not os.path.isfile(indexFile):
                    self.write_action_to_console(
                        "---------------------------------------------------------------------")
                    self.write_action_to_console("Création de l'index...")
                    self.write_action_to_console("Cette opération peut prendre plusieurs minutes...")
                    command = "gdaltindex -f \"ESRI Shapefile\" -tileindex location -t_srs EPSG:2154 " \
                              + indexFile + " " + folderBDP + "/" + el + "_TIFF_" + yearBDP + "/*.tif"
                    os.system(command)

                    if os.path.isfile(indexFile):
                        createIndex = True
                    else:
                        self.write_action_to_console("Impossible de créer l'index BDP !")
                        return False
                else:
                    createIndex = True
            else:
                self.write_action_to_console("Impossible de créer le dossier index BDP !")
                return False

            if createIndex:
                self.write_ok_action_to_console()
                layer = QgsVectorLayer(self.get_departement_layer(el[:2]), "admin_express_commune", "ogr")
                parcelles = QgsVectorLayer(indexFile, "bdp_index_" + yearBDP, "ogr")
                ok = 0
                comNoCopy = []

                for obj in layer.getFeatures():
                    code = obj.attributes()[layer.dataProvider().fieldNameIndex("INSEE_COM")]
                    name = obj.attributes()[layer.dataProvider().fieldNameIndex("NOM_COM")]

                    if code in codes:
                        indexCom = False
                        shpOutput = folderBDP + "/" + code[:2] + "_TIFF_" + yearBDP + "/index/" + code \
                                    + "_bdp_index_" + yearBDP + ".shp"

                        if not os.path.isfile(shpOutput):
                            ids = []
                            geom = obj.geometry()
                            tiles = parcelles.getFeatures(QgsFeatureRequest().setFilterRect(geom.boundingBox()))

                            for tile in tiles:
                                if tile.geometry().intersects(geom):
                                    ids.append(tile)

                            parcelles.selectByIds([p.id() for p in ids])
                            QgsVectorFileWriter.writeAsVectorFormat(parcelles,
                                                                    shpOutput,
                                                                    "CP1250",
                                                                    parcelles.crs(),
                                                                    "ESRI Shapefile",
                                                                    onlySelected=True)

                            if os.path.isfile(shpOutput):
                                indexCom = True
                        else:
                            indexCom = True

                        if indexCom:
                            nbRaster = 0
                            nbCopy = 0
                            indexComLayer = QgsVectorLayer(shpOutput, code + "_BdpIndex_" + yearBDP, "ogr")

                            for tileIndex in indexComLayer.getFeatures():
                                nbRaster = nbRaster + 1
                                pathFile = tileIndex.attributes()[indexComLayer.dataProvider()
                                    .fieldNameIndex("location")]
                                folderTif = os.path.dirname(pathFile)
                                fileTif = os.path.basename(pathFile)
                                nameTif = fileTif.split(".")[0]
                                listTif = glob.glob(folderTif + "/" + nameTif + ".*")
                                pathTifCom = folderOutput + "/" + code[:2] + "/" + code + "_" + name + "/" \
                                             + code + "_" + name + "_BDParcellaire_" + yearBDP + "/" \
                                             + code + "_" + name + "_BDP_TIFF_" + yearBDP + "/"
                                nbFile = 0

                                for tif in listTif:
                                    newFile = tif.replace(folderTif, pathTifCom)

                                    if not os.path.isfile(newFile):
                                        shutil.copy(tif, newFile)

                                        if os.path.isfile(newFile):
                                            nbFile = nbFile + 1
                                        else:
                                            if code not in comNoCopy:
                                                comNoCopy.append(code)
                                    else:
                                        nbFile = nbFile + 1

                                if nbFile == len(listTif):
                                    nbCopy = nbCopy + 1

                            if nbRaster == nbCopy:
                                ok = ok + 1

                self.write_action_to_console(str(ok) + " rasters BDP copiés sur " + str(len(codes)))
                if ok == 0:
                    self.write_action_to_console("Les rasters BDP n'ont pas été copiés !")
                    return False
                else:

                    if len(codes) == ok:
                        return True
                    else:
                        txt = ""

                        for i in range (0, len(comNoCopy)):
                            com = comNoCopy[i]

                            if i < len(comNoCopy) - 1:
                                txt = txt + com + ", "
                            else:
                                txt = txt + com

                        self.write_action_to_console("Les rasters BDP des communes ("
                                                     + txt + ") n'ont pas été copiés !")
                        return False
        else:
            self.write_action_to_console("Pas de code département")
            return False

    """
    /**************************************************************************************/
    """

    def extract_BDO(self, codes):
        global folderOutput, folderBDO, yearBDO, indexFolderBDO
        indexFolderBDO = folderBDO + "/index"
        codeDep = []

        for code in codes:
            if code[:2] not in codeDep:
                codeDep.append(code[:2])

        indexFile = ""

        for el in codeDep:
            createIndex = False
            indexFolderBDO = folderBDO + "/" + el + "_ECW_" + yearBDO + "/index"

            if self.create_folder(indexFolderBDO) == 0:
                indexFile = indexFolderBDO + "/" + el + "_bdo_index_" + yearBDO + ".shp"

                if not os.path.isfile(indexFile):
                    self.write_action_to_console(
                        "---------------------------------------------------------------------")
                    self.write_action_to_console("Création de l'index...")
                    self.write_action_to_console("Cette opération peut prendre plusieurs minutes...")
                    command = "gdaltindex -f \"ESRI Shapefile\" -tileindex location -t_srs EPSG:2154 " \
                              + indexFile + " " + folderBDO + "/" + el + "_ECW_" + yearBDO + "/*.ecw"
                    os.system(command)

                    if os.path.isfile(indexFile):
                        createIndex = True
                    else:
                        self.write_action_to_console("Impossible de créer l'index BDO !")
                        return False
                else:
                    createIndex = True
            else:
                self.write_action_to_console("Impossible de créer le dossier index BDP !")
                return False

            if createIndex:
                self.write_ok_action_to_console()
                layer = QgsVectorLayer(self.get_departement_layer(el[:2]), "admin_express_commune", "ogr")
                orthos = QgsVectorLayer(indexFile, el + "_bdo_index_" + yearBDO, "ogr")
                ok = 0
                comNoCopy = []

                for obj in layer.getFeatures():
                    code = obj.attributes()[layer.dataProvider().fieldNameIndex("INSEE_COM")]
                    name = obj.attributes()[layer.dataProvider().fieldNameIndex("NOM_COM")]

                    if code in codes:
                        indexCom = False
                        shpOutput = indexFolderBDO + "/" + code + "_bdo_index_" + yearBDO + ".shp"

                        if not os.path.isfile(shpOutput):
                            ids = []
                            geom = obj.geometry()
                            tiles = orthos.getFeatures(QgsFeatureRequest().setFilterRect(geom.boundingBox()))

                            for tile in tiles:
                                if tile.geometry().intersects(geom):
                                    ids.append(tile)

                            orthos.selectByIds([p.id() for p in ids])
                            QgsVectorFileWriter.writeAsVectorFormat(orthos,
                                                                    shpOutput,
                                                                    "CP1250",
                                                                    orthos.crs(),
                                                                    "ESRI Shapefile",
                                                                    onlySelected=True)

                            if os.path.isfile(shpOutput):
                                indexCom = True
                        else:
                            indexCom = True

                        if indexCom:
                            nbRaster = 0
                            nbCopy = 0
                            indexComLayer = QgsVectorLayer(shpOutput, code + "_bdo_index_" + yearBDO, "ogr")

                            for tileIndex in indexComLayer.getFeatures():
                                nbRaster = nbRaster + 1
                                pathFile = tileIndex.attributes()[indexComLayer.dataProvider()
                                    .fieldNameIndex("location")]
                                folderEcw = os.path.dirname(pathFile)
                                fileEcw = os.path.basename(pathFile)
                                nameEcw = fileEcw.split(".")[0]
                                listEcw = glob.glob(folderEcw + "/" + nameEcw + ".*")
                                pathEcwCom = folderOutput + "/" + code[:2] + "/" + code + "_" + name + "/" \
                                             + code + "_" + name + "_BDORTHO_" + yearBDO + "/"
                                nbFile = 0

                                for ecw in listEcw:
                                    newFile = ecw.replace(folderEcw, pathEcwCom)

                                    if not os.path.isfile(newFile):
                                        shutil.copy(ecw, newFile)

                                        if os.path.isfile(newFile):
                                            nbFile = nbFile + 1
                                        else:
                                            if code not in comNoCopy:
                                                comNoCopy.append(code)
                                    else:
                                        nbFile = nbFile + 1

                                if nbFile == len(listEcw):
                                    nbCopy = nbCopy + 1

                            if nbRaster == nbCopy:
                                ok = ok + 1

                self.write_action_to_console(str(ok) + " rasters BDO copiés sur " + str(len(codes)))
                if ok == 0:
                    self.write_action_to_console("Les rasters BDO n'ont pas été copiés !")
                    return False
                else:

                    if len(codes) == ok:
                        return True
                    else:
                        txt = ""

                        for i in range(0, len(ok)):
                            com = ok[i]

                            if i < len(comNoCopy) - 1:
                                txt = txt + com + ", "
                            else:
                                txt = txt + com

                        self.write_action_to_console("Les rasters BDO des communes ("
                                                     + txt + ") n'ont pas été copiés !")
                        return False

    """
    /**************************************************************************************/
    """

    def init_parameters(self):
        global pathAdminExpress, pathAdminExpressCommune, listCode, folderBDP, pathTiff, folderBDO, pathECW, folderOutput, lastRep, yearBDO, yearBDP

        pathAdminExpress = os.path.dirname(__file__) + "/admin_express_commune/"
        pathAdminExpressCommune = pathAdminExpress + "COMMUNE.shp"
        listCode = []
        folderBDP = ""
        pathTiff = []
        folderBDO = ""
        pathECW = []
        folderOutput = ""
        lastRep = os.path.dirname(__file__)
        indexFolderBDP = ""
        indexFolderBDO = ""
        yearBDO = ""
        yearBDP = ""

        self.textEdit_inseeCom.setText("")
        self.textEdit_nameCom.setText("")
        self.textEdit_fileMultiCom.setText("")
        self.textEdit_folderBDP.setText("")
        self.textEdit_folderBDO.setText("")
        self.textEdit_folderOutput.setText("")
        self.textEdit_console.setText("")

        self.tabOneCom.setEnabled(True)
        self.tabMultiCom.setEnabled(True)
        self.textEdit_inseeCom.setEnabled(True)
        self.toolButton_searchOneCom.setEnabled(True)
        self.toolButton_searchMultiCom.setEnabled(True)
        self.textEdit_fileMultiCom.setEnabled(True)
        self.label_folderBDP.setChecked(False)
        self.toolButton_searchFolderBDP.setEnabled(False)
        self.textEdit_folderBDP.setEnabled(False)
        self.label_folderBDO.setChecked(False)
        self.toolButton_searchFolderBDO.setEnabled(False)
        self.textEdit_folderBDO.setEnabled(False)
        self.set_progress_bar(0)

    """
    /************************************************************************************/
    """

    def update_commune_data(self):
        self.write_action_to_console(
            "---------------------------------------------------------------------")
        self.write_action_to_console("Mise à jour Admin Express...")

        layer = QgsVectorLayer(pathAdminExpressCommune, "admin_express_commune", "ogr")
        codes = []

        for obj in layer.getFeatures():
            code = obj.attributes()[layer.dataProvider().fieldNameIndex("INSEE_DEP")]

            if code not in codes:
                codes.append(code)

        i = 0
        for code in codes:
            ids = []
            shpOutput = pathAdminExpress + code + "_admin_express_commune.shp"

            i = i + 1
            self.set_progress_bar(i)

            for obj in layer.getFeatures():
                codeDep = obj.attributes()[layer.dataProvider().fieldNameIndex("INSEE_DEP")]

                if code == codeDep:
                    ids.append(obj)

            layer.selectByIds([p.id() for p in ids])
            QgsVectorFileWriter.writeAsVectorFormat(layer,
                                                    shpOutput,
                                                    "utf-8",
                                                    layer.crs(),
                                                    "ESRI Shapefile",
                                                    onlySelected=True)

        self.set_progress_bar(100)
        self.write_ok_action_to_console()

    """
    /**************************************************************************************/
    """

    def create_warning_alert(self, text):
        alert = self.create_alert_message(text)
        alert.setWindowTitle("Erreur")
        alert.setIcon(QtWidgets.QMessageBox().Warning)
        alert.exec_()

    def create_info_alert(self, text):
        alert = self.create_alert_message(text)
        alert.setWindowTitle("Information")
        alert.setIcon(QtWidgets.QMessageBox().Information)
        alert.exec_()

    def create_alert_message(self, text):
        alert = QtWidgets.QMessageBox()
        alert.setIcon(QtWidgets.QMessageBox().Warning)
        alert.setText(text)
        alert.setStandardButtons(QtWidgets.QMessageBox().Ok)
        return alert

    """
    /**************************************************************************************/
    """

    def write_action_to_console(self, text):
        self.textEdit_console.moveCursor(QtGui.QTextCursor.End)
        self.textEdit_console.setFontWeight(QtGui.QFont.Normal)
        self.textEdit_console.setTextColor(QtGui.QColor("black"))
        self.textEdit_console.append(text)

    def write_ok_action_to_console(self):
        self.textEdit_console.moveCursor(QtGui.QTextCursor.End)
        self.textEdit_console.setFontWeight(QtGui.QFont.Normal)
        self.textEdit_console.setTextColor(QtGui.QColor("green"))
        self.textEdit_console.append("OK...")

    def write_stop_action_to_console(self):
        self.textEdit_console.moveCursor(QtGui.QTextCursor.End)
        self.textEdit_console.setFontWeight(QtGui.QFont.Normal)
        self.textEdit_console.setTextColor(QtGui.QColor("red"))
        self.textEdit_console.append("Echec du découpage !")

    def set_progress_bar(self, maxi):
        i = self.progressBar.value()
        while i <= maxi:
            self.progressBar.setValue(i)
            i = i + 1

    """
    /************************************************************************************/
    """

    def get_departement_layer(self, codeDep):
        return os.path.dirname(__file__) + "/admin_express_commune/" + codeDep + "_admin_express_commune.shp"

    def create_folder(self, path):
        if not os.path.isdir(path):
            os.mkdir(path, 0o755)
            if os.path.isdir(path):
                return 0
            else:
                return 1
        else:
            return 0

    def convert_list_to_string(self, listObject):
        return ', '.join(listObject)
